/*
 * Copyright (C) 2014 ailab.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

package org.ros.rosjava_context_manager;

//import javax.management.monitor.Monitor;
import rosjava_custom_srv.*;
import socialrobot_perception_msgs.*;
//import demo.*;

import org.apache.commons.logging.Log;
import org.ros.message.MessageListener;
import org.ros.namespace.GraphName;
import org.ros.node.AbstractNodeMain;
import org.ros.node.ConnectedNode;
import org.ros.node.NodeMain;
import org.ros.node.topic.Publisher;
import org.ros.node.topic.Subscriber;
import org.jpl7.*;
import java.util.*;
import java.io.PrintStream;

//import org.ros.rosjava_context_manager.demo_perception.Person;
//import rosjava_context_manager.Person;
/**
 * A simple {@link Subscriber} {@link NodeMain}.
 */
public class ContextListener1 extends AbstractNodeMain {

	final static int queueSize = 1000;

	Scanner scan;

	static Publisher<std_msgs.Float32MultiArray> sender;


	static Log log;

	@Override
	public GraphName getDefaultNodeName() {
		return GraphName.of("context_listener1");
	}

	@Override
	public void onStart(ConnectedNode connectedNode) {
		scan = new Scanner(System.in);
		log = connectedNode.getLog();

		Subscriber<std_msgs.Float32MultiArray> object_subscriber = connectedNode.newSubscriber("/perception/objects", Objects._TYPE);// Subscriber node -->

		sender = connectedNode.newPublisher("/object_info", std_msgs.Float32MultiArray._TYPE);
		
		object_subscriber.addMessageListener(new MessageListener<Objects._TYPE>() {
			@Override
			public void onNewMessage(Objects._TYPE message) {
				String name = message.getName().getData();
				Object bb3d = message.getBb3d();
				Object center = bb3d.getCenter();
				Object position = center.getPosition();
				Object orientation = center.getOrientation();
				Object size = bb3d.getSize();



				float x = position.getX();
				float y = position.getY();
				float z = position.getZ();
				float a = orientation.getX();
				float b = orientation.getY();
				float c = orientation.getZ();
				float d = orientation.getW();

				int time = 0;

				String s = "x : "+x+"\ny : "+y+"\nz : "+z+"\na : "+a+"\nb : "+b+"\nc : "+c+"\nd : "+d+"\n";
				System.out.println(s);
				std_msgs.Float32MultiArray info = sender.newMessage();
				float[] data = new float[10];
				data[0] = x;
				data[1] = y;
				data[2] = z;
				data[3] = a;
				data[4] = b;
				data[5] = c;
				data[6] = d;
				info.setData(data);

				sender.publish(info);

			
			}	
		},queueSize);
	}
}